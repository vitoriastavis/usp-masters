markers <- GSE213982_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 2)
GSE213982_markers_filtered[[ct]] <- markers_filtered
}
# filter by p and FC
GSE144136_markers_filtered <- list()
for (ct in cell_types) {
markers <- GSE144136_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 2)
GSE144136_markers_filtered[[ct]] <- markers_filtered
}
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
View(intersection_celltypes)
View(intersection_with_targets)
GSE144136_markers_filtered
save(GSE144136_markers_filtered, "data/snrnaseq/GSE144136/GSE144136_markers_filtered")
save(GSE144136_markers_filtered, "data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
save(GSE144136_markers_filtered, file="data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
save(GSE213982_markers_filtered, file="data/snrnaseq/GSE213982/GSE213982_markers_filtered.RData")
intersection_celltypes
intersection_with_targets
# Load necessary libraries
library(dplyr)
library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(ggplot2)
library(patchwork)
library(Matrix)
library(tidyr)
# Define a função
process_seurat_object <- function(matrix_file, genes_file, cells_file, group_file, project_name = "SeuratProject", min_cells = 3, min_features = 200, normalization_method = "LogNormalize", scale_factor = 10000, nfeatures = 2000) {
# 1. Carregar matriz de expressão
expr_matrix <- readMM(matrix_file)
# 2. Carregar nomes dos genes e células
genes <- read.csv(genes_file, header = TRUE)
cells <- read.csv(cells_file, header = TRUE)
# 3. Definir nomes das linhas e colunas
rownames(expr_matrix) <- make.unique(genes$x)
colnames(expr_matrix) <- cells$x
# 4. Criar objeto Seurat
seurat_obj <- CreateSeuratObject(counts = expr_matrix,
project = project_name,
min.cells = min_cells,
min.features = min_features)
return(seurat_obj)
}
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE213982/GSE213982_markers_filtered.RData")
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
GSE144136 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE144136/GSE144136_GeneBarcodeMatrix_Annotated.mtx.gz",
genes_file = "data/snrnaseq/GSE144136/GSE144136_GeneNames.csv.gz",
cells_file = "data/snrnaseq/GSE144136/GSE144136_CellNames.csv.gz",
project_name = "GSE144136_snRNA"
)
GSE144136 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE144136/GSE144136_GeneBarcodeMatrix_Annotated.mtx.gz",
genes_file = "data/snrnaseq/GSE144136/GSE144136_GeneNames.csv.gz",
cells_file = "data/snrnaseq/GSE144136/GSE144136_CellNames.csv.gz",
project_name = "GSE144136_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE144136), "\\_"))
GSE144136$cell_type <- cell_info[,1]
GSE144136@meta.data$condition <- ifelse(grepl("Control", rownames(GSE144136@meta.data)),
"Control",
ifelse(grepl("Suicide", rownames(GSE144136@meta.data)),
"Suicide",
NA))
GSE144136$condition[GSE144136$condition == "Suicide"] <- "MDD"
GSE144136@meta.data$cell_type <- dplyr::case_when(
GSE144136@meta.data$cell_type == "Astros" ~ "Ast",
GSE144136@meta.data$cell_type == "Inhib" ~ "InN",
GSE144136@meta.data$cell_type == "Ex" ~ "ExN",
GSE144136@meta.data$cell_type == "Oligos" ~ "Oli",
GSE144136@meta.data$cell_type == "OPCs" ~ "OPC",
grepl("^Micro/Macro", GSE144136@meta.data$cell_type) ~ "Mic",
grepl("^Endo", GSE144136@meta.data$cell_type) ~ "End",
TRUE ~ GSE144136@meta.data$cell_type
)
cell_types <- setdiff(unique(GSE144136@meta.data$cell_type), "Mix")
cell_types
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
View(intersection_celltypes)
View(intersection_with_targets)
getwd()
save(intersection_celltypes, file = "/home/gbiuser/Documents/vitoria/usp-masters/snrnaseq/intersection_celltypes.RData")
save(intersection_celltypes, intersection_with_targets, file = "/home/gbiuser/Documents/vitoria/usp-masters/snrnaseq/intersections.RData")
save(intersection_celltypes, intersection_with_targets, file = "snrnaseq/intersections.RData")
getwd()
save(intersection_celltypes, intersection_with_targets, file = "/snrnaseq/intersections.RData")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.RData")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.rds")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.rds")
saveRDS(intersection_celltypes)
saveRDS(intersection_celltypes, file = "intersection_celltypes.rds")
saveRDS(intersection_with_targets, file = "snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "/snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "~/snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "~/snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "/snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "intersection_with_targets.rds")
save(intersection_celltypes, intersection_with_targets, file = "intersections.RData")
GSE144136_markers_filtered
View(GSE144136_markers_filtered)
GSE144136_markers_filtered[[ExN]]
GSE144136_markers_filtered$ExN
GSE144136_markers_filtered$InN
GSE144136_markers_filtered$Oli
GSE144136_markers_filtered$Ast
GSE144136_markers_filtered$Mic
GSE144136_markers_filtered$OPC
GSE144136_markers_filtered$End
GSE
GSE213982_markers_filtered$ExN
GSE213982_markers_filtered$InN
GSE213982_markers_filtered$Oli
View(GSE213982)
GSE144136
View(GSE144136@meta.data$condition)
unique(GSE144136@meta.data$condition)
GSE213982_markers_filtered$End
GSE144136_markers_filtered$End
sea_result <- read.csv("data/sea/sea-results.xls")
sea_result <- read.csv("data/target_prediction/sea/sea-results.xls")
# Rename columns to avoid special character issues
colnames(sea_result) <- c("Query_ID", "Target_ID", "Affinity_Threshold", "P_Value",
"Max_Tc", "Cut_Sum", "Z_Score", "Name", "Description", "Query_Smiles")
# Get only the human targets
sea_result <- sea_result[grepl("_HUMAN$", sea_result$Target_ID), ]
NR4A1 <- sea_result[sea_result$Name == "EDNRB", ]
metabolites_NR4A1B <- NR4A1$Query_ID
NR4A1 <- sea_result[sea_result$Name == "NR4A1", ]
metabolites_NR4A1B <- NR4A1$Query_ID
metabolites_NR4A1B
EDNRB <- sea_result[sea_result$Name == "EDNRB", ]
metabolites_EDNRB <- EDNRB$Query_ID
metabolites_EDNRB
# Load necessary libraries
library(dplyr)
library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(ggplot2)
library(patchwork)
library(Matrix)
library(tidyr)
# Define a função
process_seurat_object <- function(matrix_file, genes_file, cells_file, group_file, project_name = "SeuratProject", min_cells = 3, min_features = 200, normalization_method = "LogNormalize", scale_factor = 10000, nfeatures = 2000) {
# 1. Carregar matriz de expressão
expr_matrix <- readMM(matrix_file)
# 2. Carregar nomes dos genes e células
genes <- read.csv(genes_file, header = TRUE)
cells <- read.csv(cells_file, header = TRUE)
# 3. Definir nomes das linhas e colunas
rownames(expr_matrix) <- make.unique(genes$x)
colnames(expr_matrix) <- cells$x
# 4. Criar objeto Seurat
seurat_obj <- CreateSeuratObject(counts = expr_matrix,
project = project_name,
min.cells = min_cells,
min.features = min_features)
return(seurat_obj)
}
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE144136/GSE144136_filtered_notype.RData")
View(GSE144136_markers_filtered)
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE144136/GSE144136_markers_type.RData")
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE213982/GSE213982_markers_type.RData")
View(GSE144136_markers_filtered)
View(GSE213982_markers_filtered)
View(GSE144136_markers_filtered$ExN)
GSE144136_markers_filtered <- 2
GSE213982_markers_filtered <- 2
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE213982), "\\."))
GSE213982$sample_id <- cell_info[,1]
GSE213982$barcode <- cell_info[,2]
GSE213982$cell_type <- cell_info[,3]
GSE213982$cell_subtype <- cell_info[,4]
condition_info <- read.csv("data/snrnaseq/GSE213982/groups.csv")
GSE213982$condition <- condition_info$Condition[match(GSE213982$sample_id,
condition_info$Sample)]
GSE213982$condition[GSE213982$condition == "Case"] <- "MDD"
View(GSE213982)
slotNames(GSE213982)
gse_path <- "data/snrnaseq/GSE213982/"
save(GSE213982, file=paste0(gse_path, "GSE213982_counter.RData"))
VlnPlot(GSE213982, features = "NR4A1", group.by = "seurat_clusters")
colnames(GSE213982@meta.data)
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type")
VlnPlot(GSE213982, features = "NR4A1", group.by = "condition")
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type")
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type")
VlnPlot(GSE213982, features = "NR4A1", group.by = "condition") +
NoLegend()
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type") +
NoLegend()
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type") +
NoLegend()
```{r message=FALSE, warning=FALSE, include=FALSE}
VlnPlot(GSE213982, features = "NR4A1", group.by = "condition") +
NoLegend()
VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type") +
NoLegend()
nr4a1_condition_exp <- VlnPlot(GSE213982, features = "NR4A1", group.by = "condition") +
NoLegend()
nr4a1_celltype_exp <- VlnPlot(GSE213982, features = "NR4A1", group.by = "cell_type") +
NoLegend()
nr4a1_condition_exp
nr4a1_condition_exp
nr4a1_condition_exp
nr4a1_celltype_exp
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
cell_types
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE213982,
subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub,
normalization.method = "LogNormalize",
scale.factor = 10000)
nr4a1_condition_exp <- VlnPlot(GSE213982, features = "NR4A1", group.by = "condition") +
NoLegend()
nr4a1_expressions[[ct]] <- nr4a1_condition_exp
}
View(nr4a1_expressions)
show(nr4a1_expressions$Mic)
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE213982,
subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub,
normalization.method = "LogNormalize",
scale.factor = 10000)
nr4a1_condition_exp <- VlnPlot(GSE213982, features = gene, group.by = "condition") +
NoLegend() +
ggtitle(paste0(gene, " - ", ct))
nr4a1_expressions[[ct]] <- nr4a1_condition_exp
}
show(nr4a1_expressions$Mic)
show(nr4a1_expressions$ExN)
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE213982,
subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub,
normalization.method = "LogNormalize",
scale.factor = 10000)
nr4a1_condition_exp <- VlnPlot(GSE213982, features = gene, group.by = "condition") +
NoLegend() +
ggtitle(paste0(gene, " - ", ct))
nr4a1_expressions[[ct]] <- nr4a1_condition_exp
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE213982,
subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub,
normalization.method = "LogNormalize",
scale.factor = 10000)
nr4a1_condition_exp <- VlnPlot(seurat_sub, features = gene,
group.by = "condition") +
NoLegend() +
ggtitle(paste0(gene, " - ", ct))
nr4a1_expressions[[ct]] <- nr4a1_condition_exp
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
gene_data <- FetchData(GSE213982, vars = c("NR4A1", "condition"))
# Create violin plot
nr4a1_condition_exp <- ggplot(gene_data, aes(x = condition,
y = NR4A1,
fill = condition)) +
geom_violin(alpha = 0.7, trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white",
alpha = 0.8) +
theme_minimal() +
labs(title = "NR4A1 Expression by Condition",
x = "Condition",
y = "NR4A1 Expression") +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,
size = 14,
face = "bold"))
# seurat_sub <- subset(GSE213982,
#                      subset = cell_type == ct)
# seurat_sub <- NormalizeData(seurat_sub,
#                             normalization.method = "LogNormalize",
#                             scale.factor = 10000)
#
# nr4a1_condition_exp <- VlnPlot(seurat_sub, features = gene,
#                                group.by = "condition") +
#                        NoLegend() +
#                        ggtitle(paste0(gene, " - ", ct))
# nr4a1_expressions[[ct]] <- nr4a1_condition_exp
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
gene_data <- FetchData(GSE213982, vars = c("NR4A1", "condition"))
# Create violin plot
nr4a1_condition_exp <- ggplot(gene_data, aes(x = condition,
y = NR4A1,
fill = condition)) +
geom_violin(alpha = 0.7, trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white",
alpha = 0.8) +
theme_light() +
labs(title = "NR4A1 Expression by Condition",
x = "Condition",
y = "NR4A1 Expression") +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,
size = 14,
face = "bold"))
# seurat_sub <- subset(GSE213982,
#                      subset = cell_type == ct)
# seurat_sub <- NormalizeData(seurat_sub,
#                             normalization.method = "LogNormalize",
#                             scale.factor = 10000)
#
# nr4a1_condition_exp <- VlnPlot(seurat_sub, features = gene,
#                                group.by = "condition") +
#                        NoLegend() +
#                        ggtitle(paste0(gene, " - ", ct))
# nr4a1_expressions[[ct]] <- nr4a1_condition_exp
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
gene_data <- FetchData(GSE213982, vars = c("NR4A1", "condition", "cell_type"))
gene_data_filtered <- gene_data[gene_data$cell_type == ct, ]
# Create violin plot
nr4a1_condition_exp <- ggplot(gene_data_filtered, aes(x = condition,
y = NR4A1,
fill = condition)) +
geom_violin(alpha = 0.7, trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white",
alpha = 0.8) +
theme_light() +
labs(title = paste0(gene, " expression - ", ct),
x = "Condition",
y = "NR4A1 Expression") +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,
size = 14,
face = "bold"))
# seurat_sub <- subset(GSE213982,
#                      subset = cell_type == ct)
# seurat_sub <- NormalizeData(seurat_sub,
#                             normalization.method = "LogNormalize",
#                             scale.factor = 10000)
#
# nr4a1_condition_exp <- VlnPlot(seurat_sub, features = gene,
#                                group.by = "condition") +
#                        NoLegend() +
#                        ggtitle(paste0(gene, " - ", ct))
# nr4a1_expressions[[ct]] <- nr4a1_condition_exp
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
gene <- "NR4A1"
nr4a1_expressions <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
gene_data <- FetchData(GSE213982, vars = c("NR4A1", "condition", "cell_type"))
gene_data_filtered <- gene_data[gene_data$cell_type == ct, ]
# Create violin plot
nr4a1_condition_exp <- ggplot(gene_data_filtered, aes(x = condition,
y = NR4A1,
fill = condition)) +
geom_boxplot(alpha = 0.7, outlier.alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.3, size = 0.5) +
# geom_violin(alpha = 0.7, trim = FALSE) +
# geom_boxplot(width = 0.1, fill = "white",
#              alpha = 0.8) +
theme_light() +
labs(title = paste0(gene, " expression - ", ct),
x = "Condition",
y = "NR4A1 Expression") +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,
size = 14,
face = "bold"))
ggsave(paste0(gse_path, gene, "_", ct, ".png"), nr4a1_condition_exp)
}
# Load necessary libraries
library(dplyr)
library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(ggplot2)
library(patchwork)
library(Matrix)
library(GENIE3)
# library(variancePartition)
# library(BiocParallel)
# library(WGCNA)
gse_path <- "data/snrnaseq/GSE144136/"
load(paste0(gse_path, "/GSE144136_counts.RData"))
GSE144136 <- FindVariableFeatures(GSE144136,
selection.method = "vst",
nfeatures = 1000)
library(BiocParallel)
library(variancePartition)
# Prepare your data
# Assume `seurat_obj` is your Seurat object with normalized data and metadata
GSE144136_matrix <- GetAssayData(GSE144136, assay = "RNA", slot = "data")
meta_data <- GSE144136@meta.data
meta_data$condition <- as.numeric(factor(meta_data$condition))
meta_data$cell_type <- as.numeric(factor(meta_data$cell_type))
GSE144136 <- NULL
gc()
# Create a formula describing the variables to partition
form <- ~ (1|orig.ident) + condition + cell_type
param <- SnowParam(workers = 4, type = "SOCK", progressbar = FALSE)
# Define chunk size
chunk_size <- 1000
gene_names <- rownames(GSE144136_matrix)
n_genes <- length(gene_names)
# Create empty list to store results
varPart_list <- list()
gc()
# Loop over chunks
for (i in seq(1, n_genes, by = chunk_size)) {
cat("Processing genes", i, "to", min(i + chunk_size - 1, n_genes), "\n")
# Subset matrix
gene_subset <- gene_names[i:min(i + chunk_size - 1, n_genes)]
matrix_chunk <- GSE144136_matrix[gene_subset, ]
# Run model
varPart_chunk <- fitExtractVarPartModel(matrix_chunk, form, meta_data,
BPPARAM = SnowParam(4))  # Adjust cores if needed
# Store result
varPart_list[[length(varPart_list) + 1]] <- varPart_chunk
# Clean up
rm(matrix_chunk)
gc()
}
View(GSE144136_matrix)
# Combine results
varPart_combined <- do.call(rbind, varPart_list)
top_genes <- head(varPart_combined[order(varPart_combined$condition, decreasing = TRUE), c("condition","gene")], 100)
varPart_combined
top_genes <- head(varPart_combined[order(varPart_combined$condition, decreasing = TRUE), c("condition","gene")], 100)
varPart_combined$gene <- rownames(varPart_combined)
top_genes <- head(varPart_combined[order(varPart_combined$condition, decreasing = TRUE), c("condition","gene")], 100)
load(file='data/target_prediction/targets_intersection.RData')
intersect(targets_intersection, top_genes$gene)
save(top_genes, file=paste0(gse_path, "GSE144136_variance.RData"))
load("~/usp/usp-masters/data/snrnaseq/GSE144136/GSE144136_variance.RData")
load(file='data/target_prediction/targets_intersection.RData')
intersect(targets_intersection, top_genes$gene)
