# Bases para interseção
target_sources <- list(
sea = sea_targets,
stp = stp_targets,
intersection = targets_intersection
)
# Zeng et al. (2024)
zeng_twas <- read.csv("data/twas/zeng2024.csv",
header = TRUE)
zeng_lists <- list(
type = unique(zeng_twas$Gene_celltype),
subtype = unique(zeng_twas$Genes_cellsubtype),
type_smr = unique(zeng_twas$SMR_celltype),
subtype_smr = unique(zeng_twas$SMR_cellsubtype),
coloc = unique(zeng_twas$COLOC)
)
# Lista para armazenar os resultados
zeng_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(zeng_lists)) {
key <- paste0(target_name, "_", twas_name)
zeng_intersections[[key]] <- intersect(target_sources[[target_name]], zeng_lists[[twas_name]])
}
}
# Li et al. (2025)
li_twas <- read.csv("data/twas/li2025.csv",
header = TRUE)
zeng_lists <- list(
final_5 = unique(zeng_twas$Final_5plus),
coloc1 = unique(zeng_twas$COLOC),
colo2 = unique(zeng_twas$COLOC_2),
smr = unique(zeng_twas$PsychENCODE_SMR),
final = unique(zeng_twas$Final)
)
# Lista para armazenar os resultados
li_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(zeng_lists)) {
key <- paste0(target_name, "_", twas_name)
li_intersections[[key]] <- intersect(target_sources[[target_name]], zeng_lists[[twas_name]])
}
}
ViewView(li_intersections)
View(li_intersections)
sea_targets <- read.csv("data/sea/sea_targets.csv")$Targets
stp_targets <- read.csv("data/stp/stp_targets.csv")$Targets
load(file='data/targets_intersection.RData')
# Bases para interseção
target_sources <- list(
sea = sea_targets,
stp = stp_targets,
intersection = targets_intersection
)
# Zeng et al. (2024)
zeng_twas <- read.csv("data/twas/zeng2024.csv",
header = TRUE)
zeng_lists <- list(
type = unique(zeng_twas$Gene_celltype),
subtype = unique(zeng_twas$Genes_cellsubtype),
type_smr = unique(zeng_twas$SMR_celltype),
subtype_smr = unique(zeng_twas$SMR_cellsubtype),
coloc = unique(zeng_twas$COLOC)
)
# Lista para armazenar os resultados
zeng_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(zeng_lists)) {
key <- paste0(target_name, "_", twas_name)
zeng_intersections[[key]] <- intersect(target_sources[[target_name]], zeng_lists[[twas_name]])
}
}
# Li et al. (2025)
li_twas <- read.csv("data/twas/li2025.csv",
header = TRUE)
li_lists <- list(
final_5 = unique(zeng_twas$Final_5plus),
coloc1 = unique(zeng_twas$COLOC),
colo2 = unique(zeng_twas$COLOC_2),
smr = unique(zeng_twas$PsychENCODE_SMR),
final = unique(zeng_twas$Final)
)
# Lista para armazenar os resultados
li_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(li_lists)) {
key <- paste0(target_name, "_", twas_name)
li_intersections[[key]] <- intersect(target_sources[[target_name]], li_lists[[twas_name]])
}
}
View(li_intersections)
sea_targets <- read.csv("data/sea/sea_targets.csv")$Targets
stp_targets <- read.csv("data/stp/stp_targets.csv")$Targets
load(file='data/targets_intersection.RData')
# Bases para interseção
target_sources <- list(
sea = sea_targets,
stp = stp_targets,
intersection = targets_intersection
)
# Zeng et al. (2024)
zeng_twas <- read.csv("data/twas/zeng2024.csv",
header = TRUE)
zeng_lists <- list(
type = unique(zeng_twas$Gene_celltype),
subtype = unique(zeng_twas$Genes_cellsubtype),
type_smr = unique(zeng_twas$SMR_celltype),
subtype_smr = unique(zeng_twas$SMR_cellsubtype),
coloc = unique(zeng_twas$COLOC)
)
# Lista para armazenar os resultados
zeng_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(zeng_lists)) {
key <- paste0(target_name, "_", twas_name)
zeng_intersections[[key]] <- intersect(target_sources[[target_name]], zeng_lists[[twas_name]])
}
}
# Li et al. (2025)
li_twas <- read.csv("data/twas/li2025.csv",
header = TRUE)
li_lists <- list(
final_5 = unique(li_twas$Final_5plus),
coloc1 = unique(li_twas$COLOC),
colo2 = unique(li_twas$COLOC_2),
smr = unique(li_twas$PsychENCODE_SMR),
final = unique(li_twas$Final)
)
# Lista para armazenar os resultados
li_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(li_lists)) {
key <- paste0(target_name, "_", twas_name)
li_intersections[[key]] <- intersect(target_sources[[target_name]], li_lists[[twas_name]])
}
}
View(li_intersections)
li_lists
li_twas
# Li et al. (2025)
li_twas <- read.csv("data/twas/li2025.csv",
header = TRUE)
li_twas <- read.csv("data/twas/li2025.csv",
li_twas
;
li_twas
li_lists <- list(
final_5 = unique(li_twas$Final_5plus),
coloc1 = unique(li_twas$COLOC),
colo2 = unique(li_twas$COLOC_2),
smr = unique(li_twas$PsychENCODE_SMR),
final = unique(li_twas$Final)
)
li_lists
li_intersections <- list()
# Loop para gerar e armazenar interseções
for (target_name in names(target_sources)) {
for (twas_name in names(li_lists)) {
key <- paste0(target_name, "_", twas_name)
li_intersections[[key]] <- intersect(target_sources[[target_name]], li_lists[[twas_name]])
}
}
View(li_intersections)
View(zeng_intersections)
sea_result <- read.csv("data/sea/sea-results.xls")
# Rename columns to avoid special character issues
colnames(sea_result) <- c("Query_ID", "Target_ID", "Affinity_Threshold", "P_Value",
"Max_Tc", "Cut_Sum", "Z_Score", "Name", "Description", "Query_Smiles")
# Get only the human targets
sea_result <- sea_result[grepl("_HUMAN$", sea_result$Target_ID), ]
EPHB2 <- sea_result[sea_result$Name == "EPHB2", ]
metabolites_EPHB2 <- EPHB2$Query_ID
sea_result <- read.csv("data/sea/sea-results.xls")
# Rename columns to avoid special character issues
colnames(sea_result) <- c("Query_ID", "Target_ID", "Affinity_Threshold", "P_Value",
"Max_Tc", "Cut_Sum", "Z_Score", "Name", "Description", "Query_Smiles")
# Get only the human targets
sea_result <- sea_result[grepl("_HUMAN$", sea_result$Target_ID), ]
EPHB2 <- sea_result[sea_result$Name == "EPHB2", ]
metabolites_EPHB2 <- EPHB2$Query_ID
TNKS2 <- sea_result[sea_result$Name == "TNKS2", ]
metabolites_TNKS2 <- TNKS2$Query_ID
metabolites_EPHB2
metabolites_TNKS2
length(metabolites_EPHB2)
length(metabolites_TNKS2)
metabolites_EPHB2
metabolites_TNKS2
intersect(metabolites_EPHB2, metabolites_TNKS2)
metabolites_TNKS2
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
# Load necessary libraries
library(dplyr)
library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(ggplot2)
library(patchwork)
library(Matrix)
library(tidyr)
# Define a função
process_seurat_object <- function(matrix_file, genes_file, cells_file, group_file, project_name = "SeuratProject", min_cells = 3, min_features = 200, normalization_method = "LogNormalize", scale_factor = 10000, nfeatures = 2000) {
# 1. Carregar matriz de expressão
expr_matrix <- readMM(matrix_file)
# 2. Carregar nomes dos genes e células
genes <- read.csv(genes_file, header = TRUE)
cells <- read.csv(cells_file, header = TRUE)
# 3. Definir nomes das linhas e colunas
rownames(expr_matrix) <- make.unique(genes$x)
colnames(expr_matrix) <- cells$x
# 4. Criar objeto Seurat
seurat_obj <- CreateSeuratObject(counts = expr_matrix,
project = project_name,
min.cells = min_cells,
min.features = min_features)
return(seurat_obj)
}
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE213982), "\\."))
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
GSE213982 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix.mtx.gz",
genes_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_genes_rows.csv.gz",
cells_file = "data/snrnaseq/GSE213982/GSE213982_combined_counts_matrix_cells_columns.csv.gz",
project_name = "GSE213982_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE213982), "\\."))
GSE213982$sample_id <- cell_info[,1]
GSE213982$barcode <- cell_info[,2]
GSE213982$cell_type <- cell_info[,3]
GSE213982$cell_subtype <- cell_info[,4]
condition_info <- read.csv("data/snrnaseq/GSE213982/groups.csv")
GSE213982$condition <- condition_info$Condition[match(GSE213982$sample_id,
condition_info$Sample)]
GSE213982$condition[GSE213982$condition == "Case"] <- "MDD"
GSE213982_markers <- list()
cell_types <- setdiff(unique(GSE213982@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE213982,
subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub,
normalization.method = "LogNormalize",
scale.factor = 10000)
Idents(seurat_sub) <- "condition"
markers <- FindMarkers(seurat_sub, ident.1 = "MDD",
ident.2 = "Control",
test.use = "wilcox")
GSE213982_markers[[ct]] <- markers
}
# filter by p and FC
GSE213982_markers_filtered <- list()
for (ct in cell_types) {
markers <- GSE213982_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 0.8)
GSE213982_markers_filtered[[ct]] <- markers_filtered
}
GSE213982_markers_filtered
GSE144136 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE144136/GSE144136_GeneBarcodeMatrix_Annotated.mtx.gz",
genes_file = "data/snrnaseq/GSE144136/GSE144136_GeneNames.csv.gz",
cells_file = "data/snrnaseq/GSE144136/GSE144136_CellNames.csv.gz",
project_name = "GSE144136_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE144136), "\\_"))
GSE144136$cell_type <- cell_info[,1]
GSE144136@meta.data$condition <- ifelse(grepl("Control", rownames(GSE144136@meta.data)),
"Control",
ifelse(grepl("Suicide", rownames(GSE144136@meta.data)),
"Suicide",
NA))
GSE144136$condition[GSE144136$condition == "Suicide"] <- "MDD"
GSE144136@meta.data$cell_type <- dplyr::case_when(
GSE144136@meta.data$cell_type == "Astros" ~ "Ast",
GSE144136@meta.data$cell_type == "Inhib" ~ "InN",
GSE144136@meta.data$cell_type == "Ex" ~ "ExN",
GSE144136@meta.data$cell_type == "Oligos" ~ "Oli",
GSE144136@meta.data$cell_type == "OPCs" ~ "OPC",
grepl("^Micro/Macro", GSE144136@meta.data$cell_type) ~ "Mic",
grepl("^Endo", GSE144136@meta.data$cell_type) ~ "End",
TRUE ~ GSE144136@meta.data$cell_type
)
GSE144136_markers <- list()
cell_types <- setdiff(unique(GSE144136@meta.data$cell_type), "Mix")
for (ct in cell_types) {
seurat_sub <- subset(GSE144136, subset = cell_type == ct)
seurat_sub <- NormalizeData(seurat_sub, normalization.method = "LogNormalize",
scale.factor = 10000)
Idents(seurat_sub) <- "condition"
markers <- FindMarkers(seurat_sub, ident.1 = "MDD", ident.2 = "Control",
test.use = "wilcox")
GSE144136_markers[[ct]] <- markers
}
# filter by p and FC
GSE144136_markers_filtered <- list()
for (ct in cell_types) {
markers <- GSE144136_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 0.8)
GSE144136_markers_filtered[[ct]] <- markers_filtered
}
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
intersection_celltypes
View(intersection_celltypes)
View(intersection_with_targets)
# filter by p and FC
GSE213982_markers_filtered <- list()
for (ct in cell_types) {
markers <- GSE213982_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 2)
GSE213982_markers_filtered[[ct]] <- markers_filtered
}
# filter by p and FC
GSE144136_markers_filtered <- list()
for (ct in cell_types) {
markers <- GSE144136_markers[[ct]]
markers_filtered <- markers %>%
filter(p_val_adj < 0.05, abs(avg_log2FC) >= 2)
GSE144136_markers_filtered[[ct]] <- markers_filtered
}
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
View(intersection_celltypes)
View(intersection_with_targets)
GSE144136_markers_filtered
save(GSE144136_markers_filtered, "data/snrnaseq/GSE144136/GSE144136_markers_filtered")
save(GSE144136_markers_filtered, "data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
save(GSE144136_markers_filtered, file="data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
save(GSE213982_markers_filtered, file="data/snrnaseq/GSE213982/GSE213982_markers_filtered.RData")
intersection_celltypes
intersection_with_targets
# Load necessary libraries
library(dplyr)
library(Seurat)
library(Signac)
library(GenomeInfoDb)
library(ggplot2)
library(patchwork)
library(Matrix)
library(tidyr)
# Define a função
process_seurat_object <- function(matrix_file, genes_file, cells_file, group_file, project_name = "SeuratProject", min_cells = 3, min_features = 200, normalization_method = "LogNormalize", scale_factor = 10000, nfeatures = 2000) {
# 1. Carregar matriz de expressão
expr_matrix <- readMM(matrix_file)
# 2. Carregar nomes dos genes e células
genes <- read.csv(genes_file, header = TRUE)
cells <- read.csv(cells_file, header = TRUE)
# 3. Definir nomes das linhas e colunas
rownames(expr_matrix) <- make.unique(genes$x)
colnames(expr_matrix) <- cells$x
# 4. Criar objeto Seurat
seurat_obj <- CreateSeuratObject(counts = expr_matrix,
project = project_name,
min.cells = min_cells,
min.features = min_features)
return(seurat_obj)
}
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE213982/GSE213982_markers_filtered.RData")
load("~/Documents/vitoria/usp-masters/data/snrnaseq/GSE144136/GSE144136_markers_filtered.RData")
# Load target_intersection (303 targets)
load(file='data/targets_intersection.RData')
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
GSE144136 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE144136/GSE144136_GeneBarcodeMatrix_Annotated.mtx.gz",
genes_file = "data/snrnaseq/GSE144136/GSE144136_GeneNames.csv.gz",
cells_file = "data/snrnaseq/GSE144136/GSE144136_CellNames.csv.gz",
project_name = "GSE144136_snRNA"
)
GSE144136 <- process_seurat_object(
matrix_file = "data/snrnaseq/GSE144136/GSE144136_GeneBarcodeMatrix_Annotated.mtx.gz",
genes_file = "data/snrnaseq/GSE144136/GSE144136_GeneNames.csv.gz",
cells_file = "data/snrnaseq/GSE144136/GSE144136_CellNames.csv.gz",
project_name = "GSE144136_snRNA"
)
cell_info <- do.call(rbind, strsplit(colnames(GSE144136), "\\_"))
GSE144136$cell_type <- cell_info[,1]
GSE144136@meta.data$condition <- ifelse(grepl("Control", rownames(GSE144136@meta.data)),
"Control",
ifelse(grepl("Suicide", rownames(GSE144136@meta.data)),
"Suicide",
NA))
GSE144136$condition[GSE144136$condition == "Suicide"] <- "MDD"
GSE144136@meta.data$cell_type <- dplyr::case_when(
GSE144136@meta.data$cell_type == "Astros" ~ "Ast",
GSE144136@meta.data$cell_type == "Inhib" ~ "InN",
GSE144136@meta.data$cell_type == "Ex" ~ "ExN",
GSE144136@meta.data$cell_type == "Oligos" ~ "Oli",
GSE144136@meta.data$cell_type == "OPCs" ~ "OPC",
grepl("^Micro/Macro", GSE144136@meta.data$cell_type) ~ "Mic",
grepl("^Endo", GSE144136@meta.data$cell_type) ~ "End",
TRUE ~ GSE144136@meta.data$cell_type
)
cell_types <- setdiff(unique(GSE144136@meta.data$cell_type), "Mix")
cell_types
intersection_celltypes <- list()
for (ct in cell_types) {
intersection_celltypes[[ct]] <- intersect(rownames(GSE144136_markers_filtered[[ct]]),
rownames(GSE213982_markers_filtered[[ct]]))
}
intersection_with_targets <- list()
for (ct in cell_types) {
intersection_with_targets[[ct]] <- intersect(targets_intersection,
intersection_celltypes[[ct]])
}
View(intersection_celltypes)
View(intersection_with_targets)
getwd()
save(intersection_celltypes, file = "/home/gbiuser/Documents/vitoria/usp-masters/snrnaseq/intersection_celltypes.RData")
save(intersection_celltypes, intersection_with_targets, file = "/home/gbiuser/Documents/vitoria/usp-masters/snrnaseq/intersections.RData")
save(intersection_celltypes, intersection_with_targets, file = "snrnaseq/intersections.RData")
getwd()
save(intersection_celltypes, intersection_with_targets, file = "/snrnaseq/intersections.RData")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.RData")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.rds")
saveRDS(intersection_celltypes, file = "/snrnaseq/intersection_celltypes.rds")
saveRDS(intersection_celltypes)
saveRDS(intersection_celltypes, file = "intersection_celltypes.rds")
saveRDS(intersection_with_targets, file = "snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "/snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "~/snrnaseq/intersection_with_targets,.rds")
saveRDS(intersection_with_targets, file = "~/snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "/snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "snrnaseq/intersection_with_targets.rds")
saveRDS(intersection_with_targets, file = "intersection_with_targets.rds")
save(intersection_celltypes, intersection_with_targets, file = "intersections.RData")
GSE144136_markers_filtered
View(GSE144136_markers_filtered)
GSE144136_markers_filtered[[ExN]]
GSE144136_markers_filtered$ExN
GSE144136_markers_filtered$InN
GSE144136_markers_filtered$Oli
GSE144136_markers_filtered$Ast
GSE144136_markers_filtered$Mic
GSE144136_markers_filtered$OPC
GSE144136_markers_filtered$End
GSE
GSE213982_markers_filtered$ExN
GSE213982_markers_filtered$InN
GSE213982_markers_filtered$Oli
View(GSE213982)
GSE144136
View(GSE144136@meta.data$condition)
unique(GSE144136@meta.data$condition)
GSE213982_markers_filtered$End
GSE144136_markers_filtered$End
sea_result <- read.csv("data/sea/sea-results.xls")
sea_result <- read.csv("data/target_prediction/sea/sea-results.xls")
# Rename columns to avoid special character issues
colnames(sea_result) <- c("Query_ID", "Target_ID", "Affinity_Threshold", "P_Value",
"Max_Tc", "Cut_Sum", "Z_Score", "Name", "Description", "Query_Smiles")
# Get only the human targets
sea_result <- sea_result[grepl("_HUMAN$", sea_result$Target_ID), ]
NR4A1 <- sea_result[sea_result$Name == "EDNRB", ]
metabolites_NR4A1B <- NR4A1$Query_ID
NR4A1 <- sea_result[sea_result$Name == "NR4A1", ]
metabolites_NR4A1B <- NR4A1$Query_ID
metabolites_NR4A1B
EDNRB <- sea_result[sea_result$Name == "EDNRB", ]
metabolites_EDNRB <- EDNRB$Query_ID
metabolites_EDNRB
